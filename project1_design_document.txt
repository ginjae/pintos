      +--------------------+
      |        CS 140      |
      | PROJECT 1: THREADS |
      |   DESIGN DOCUMENT  |
      +--------------------+
           
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Jaemin Kim <jm611@unist.ac.kr>
Munseong Son <osoli6949@unist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

Jaemin Kim (60%): Implemented priority handling. Advice & feedback on both 
implementation. Overall code cleanup and improvement on code readability.

Munseong Son(40%): Implemented Alarm clock & general idea of list sorting 
and comparison function.

-> 60:40 contribution.

           ALARM CLOCK
           ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

// thread.c & thread.h
1. int64_t wake_me_at;
-> Tick to wake up the thread. Updated if it is current thread &
thread_sleep(int64_t ticks); is called.

2. static struct list sleeping_list;
-> List of sleeping threads. Every time the timer_sleep() called, 
current thread is pushed into this list.

3. thread_sleep (int64_t ticks);
-> Put current thread into sleep, with assigning "wake_me_at" tick
to that thread.

4. void thread_wake_sleeping(int64_t ticks);
-> Search through sleeping_list to wake sleeping threads that have
less "wake_me_at" than current tick.


// timer.c

1. timer_sleep (int64_t ticks);
-> Put current thread into sleep for [ticks]. If ticks == 1, then
it just calls thread_yield(). Otherwise, it calls thread_sleep.

2. static void timer_interrupt (struct intr_frame *args UNUSED);
-> Update tick & calls thread_tick(); Calls thread_wake_sleeping.


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

If argument ticks is 1, then it just puts current thread to ready
state by just calling thread_yield().

Otherwise, it records current tick as "start" & 
calls thread_sleep(start + ticks). This makes current thread to sleep
until OS tick reaches start + ticks.

In thread_sleep(start + ticks), current thread's state becomes
"THREAD_BLOCKED", which prevents scheduler from executing this thread.
Also, that thread is pushed into the sleeping_list, which is a sorted list
in terms of "wake_me_at" ticks in ascending order.

Every time timer_interrupt handler is called, it calls thread_wake_sleeping,
which checks sleeping_list & wake any thread that has no greater 
"wake_me_at" value than current OS tick.

Since it is sorted in ascending order, thread_wake_sleeping checks the list
until it meets a sleeping thread that has greater "wake_me_at" value than 
current OS tick or until it reaches the end of that list.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

thread_wake_sleeping function is optimized by making it
return as soon as possible if sleeping_list is empty.

Except those changes (which are essential to avoid race conditions),
no direct features are added in the timer_interrupt to minimize
the amount of time spend during its call.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

// sleeping_list sort
We made sleeping_list as a sorted list because traversing the list should
be performed in every timer interrupt with non-empty sleeping list. 

Therefore, it is more efficient to sort the list in every push call, than
just traversing every timer interrupt, spending O(n) time for each.

thread_wake_sleeping function should take O(1) time, or take O(n) time &
reduces sleeping_list by O(n), further optimizing future function calls.


// Synchronization design

Synchronization is achieved by utilizing while loop in the 
thread_wake_sleeping() function.

Default solution for this was calling thread_yield() until specified
ticks. It "solves" this problem by just stopping every thread from
running, resulting a busy loop.

Other possible solution was just calling thread_wake_sleeping multiple
times in one timer_interrupt, which is far from optimized design for 
obvious reasons.

Another one is implementing: awaken boolean, which stops timer_interrupt 
from updating the tick if any of the sleeping thread is awaken. 
Otherwise, tick is updated while thread_wake_sleeping is called, 
preventing thread from awaken simultaneously.


       PRIORITY SCHEDULING
       ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

For PRIORITY SCHEDULING, we just added two functions.

1. bool thread_priority_greater
(const struct list_elem *a, const struct list_elem *b, void *aux UNUSED)
-> When a thread is inserted in ‘ready_list’, the ‘ready_list’ can keep
the descending order ofthreads’ priority using ‘list_insert_order’ 
function with this comparison function.

2. void thread_check_priority (void);
-> The current-running thread yields the CPU when the priority of the
thread with the highest priority in ‘ready_list’ is greater than the
current-running thread’s priority.

Then, we modify some functions.

1. void thread_unblock (void) & void thread_yield (void)
-> We use list_insert_ordered function with thread_priority_greater
instead of list_push_back function for the current thread to move to
'ready_list'.

2. void thread_set_priority (int new_priority) & 
      tid_t thread_create (const char *name, int priority,
            thread_func *function, void *aux)
-> At the end of that functions, we add thread_check_priority function
to yield the CPU immediately if the current thread's priority is lower
than the highest priority of thread in 'ready_list'. 

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

Obviously, we needed to keep ‘ready_list’ in the descending order of 
priority. However, in our opinion, sorting the whole of ‘ready_list’ 
whenever a thread is pushed to ‘ready_list’ might be a huge overhead. 
Therefore, we chose the design that when a thread needs to be inserted 
in ‘ready_list’, using ‘list_insert_order’ with ‘thread_priority_greater’, 
a comparison function, keeps ‘ready_list’ in the descending order of 
thread’s priority.

The manual instructs that the current thread should immediately yield the 
CPU to the thread in ‘ready_list’ if that thread has a higher priority than 
the current thread’s priority. Then, we started to think when this kind of 
situations can happen. In the result, we figured out that they can happen 
“when a thread is newly created with high priority (higher than the 
current-running thread’s one)”  or “when the current thread’s priority is 
set to low priority (lower than the highest priority in ‘ready_list’)”. 
Therefore, we created ‘thread_check_priority’ function that if the 
current-running thread’s priority is greater than the highest priority in 
‘ready_list’, then the current thread yield the CPU. This function is used 
in ‘thread_create’ and ‘thread_set_priority’. It makes our code simple and 
intuitive.

        ADVANCED SCHEDULER
        ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

         SURVEY QUESTIONS
         ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
