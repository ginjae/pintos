       	       	    +---------------------------+
		    |		CS 140		|
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	   DESIGN DOCUMENT	|
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Jaemin Kim <jm611@unist.ac.kr>
Munseong Son <osoli6949@unist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct frame {
  void* frame_addr;              // allocated frame's address. (=kpage)
  void* page_addr;               // virtual address pointing to page. (=upage)
  struct thread* owner_thread;   // Process(thread) who owns this frame
  struct list_elem ftable_elem;  // list element for frame table list
  bool is_evictable;             // true iff the corresponding SPT exists.
};

/* Frame table that keeps track of all available frames. */
static struct list frame_table;

/* Lock for frame_alloc, which is critical section. */
static struct lock frame_lock;

struct hash SPT; /* PER-PROCESS SPT */ (struct thread's member.)

// enums for specifying page's purpose
enum page_purpose { FOR_FILE = 0, FOR_STACK = 1, FOR_MMAP = 2 };

struct page {
  void *page_addr;   // upage
  void *frame_addr;  // kpage

  bool is_writable;  // is writing on this page allowed?
  size_t swap_i;     // index for swap disk (swapped page end up there)
  bool is_swapped;   // true if this page is in swap_disk, false otherwise.
  enum page_purpose purpose;  // Purpose for this page

  /* File-related members */
  struct file *page_file;  // file for read (if purpose == FOR_FILE)
  off_t ofs;               // file offset.
  size_t read_bytes;       // size of read bytes.
  size_t zero_bytes;       // size of remaining page (should be zeroed)

  struct hash_elem SPT_elem;  // hash elem for hash SPT
  struct list_elem MMAP_elem; /* list elem for MMAP mapping */
};

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

Our find_frame function searches the frame table with frame's address
(given by the palloc_get_page()) as a key for search.

In our design, if page do exist in the memory, then it's address for frame 
should be unique per page. Because of that, searching the frame table using
only the frame's address is enough.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

During the eviction, we access the "accessed" bit by calling
pagedir_is_accessed() to the frame's address. In the dirty bit case,
we impose more strict criterion and call pagedir_is_dirty() to
not only the frame's address but also the corresponding user page address
(upage). This allows us to check that if the page is accessed / dirty.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

As mentioned in above, static lock frame_lock is declared & used during
pushing the new frame into the frame table & finding a victim.
This prevents the potential race condition by allowing at most one process
to alter the frame table at the same time.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

Most of the page's members are determined from the arguments of
the load_segment() function in process.c. That way, we can store 
informations that are passed by the loader during the load phase.

We defined frame's member so that it can store informations that 
is required for searching its corresponding SPT entry. It contains 
its frame's address, corresponding page address, its owner_thread
that contains the process's SPT, and the boolean is_evictable for
find_frame function to use while deciding the victim frame to evict.

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
-> 	This 'struct mapping' is defined in 'vm/mmap.h' and used for process to maintain
	its 'mmap_table'.
	It should have
		1. a mapping 'id' that is unique in the 'mmap_table',
		2. the virtual address that mapped pages start from,
		3. the length of mapped file,
	4. the file pointer of mapped file,
	5. list element for 'mmap_table' of the owner process,
	6. list of pages (SPT entry) that the mapping allocated
	struct mapping {
		int id;                 /* Mapping id */
		void *addr;             /* Starting virtual address to store */
		int32_t size;           /* File length */
		struct file *file;      /* Target file */
		struct list_elem elem;  /* List element for mmap_table in process */
		struct list pages;      /* List of pages that the mapping allocated */
	};

	struct thread {
		...
		#ifdef USERPROG
	struct list mmap_table;   /* List of mappings (mmap table) */
	void* data_segment_start; /* Pointer to the starting point of data segment */
	#endif
	}
	: The member 'struct list mmap_table' is for per-process mmap table which
	stores mappings of memory mapped files that the process has.
	The member 'data_segment_start' stores the starting virtual address of data segment
	of the process, and it has the value when the loading succeeds. It is used for 
	checking that the argument address in mmap system call is above the data segment.

	struct page {
		...
	struct list_elem MMAP_elem; /* list elem for MMAP mapping */
	};
	: The member 'struct list_elem MMAP_elem' is added to get in the list of pages that
	is owned by mmap mapping.

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.
->Â 	Memory mapped files directly map virtual memory to file contents using
	supplemental page table (SPT), but it marks the SPT entry as "FOR_MMAP" and
	pushes the entry into the list of pages in the mapping. It inserts SPT entry
	into the SPT when mmap system call is invoked. If the page fault occurs,
	then the handler lazy-loads from the corresponding file instead of swap slots.
	The frames allocated by mmap could be evicted in the same way as other evictable
	frame, but the pages and SPT entries by mmap are freed when 'munmap' is called or
	the owner process terminates.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.
->	First, our implementation checks that the address received is below
	stack (PHYS_BASE - 0x800000) and above starting address of data segment.
	Then, we check the new mapping would overlap any existing set of mapped pages
	by 'find_mapping_addr' function which searches mapping in certain virtual address.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.
->	We implement SPT entry to have enum member for its purpose (FOR_FILE, 
	FOR_SWAP, and FOR_MMAP). Therefore, the SPT entries created by mmap mappings
	are distinguished from SPT entries that should be swapped with disk, which
	leads only SPT entries made by mmap mappings to write-back directly to the
	corresponding file. Therefore, the two cases do not share much code, while
	they are handled in the same function when only considering the frame eviction.
	More about mmap mapping, when 'munmap' system calls are invoked manually or
	when the owner process terminates, write-back process should be independently
	implemented in 'munmap' system call function.


			     CONTRIBUTION
			     ============

Jaemin Kim (__%): 

Munseong Son (__%): 

-> __:__ contribution.
